// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String                @id @default(cuid())
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  hashedPassword      String?
  image               String?
  accounts            Account[]
  sessions            Session[]
  classId             Int?
  class               Class?                @relation(fields: [classId], references: [id])
  ExamNote            ExamNote[]
  UserExamPreferences UserExamPreferences[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Class {
  id    Int    @id @unique
  users User[]
  exams Exam[]
}

model ExamType {
  id       Int    @id @default(autoincrement())
  name     String
  priority Int
  Exam     Exam[]
}

model Exam {
  id                  Int                   @id @default(autoincrement())
  classId             Int
  date                DateTime
  subject             Subject               @relation(fields: [subjectId], references: [id])
  subjectId           Int
  class               Class                 @relation(fields: [classId], references: [id])
  examNotes           ExamNote[]
  UserExamPreferences UserExamPreferences[]
  examTypeId          Int
  examType            ExamType              @relation(fields: [examTypeId], references: [id])
  stateId             Int                   @default(0)
  State               State                 @relation(fields: [stateId], references: [id])
}

model ExamNote {
  id                  Int                   @id @default(autoincrement())
  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  dateCreated         DateTime
  content             String
  examId              Int
  exam                Exam                  @relation(fields: [examId], references: [id])
  UserExamPreferences UserExamPreferences[]
}

model Subject {
  id   Int    @id @default(autoincrement())
  name String
  Exam Exam[]
}

model State {
  id                  Int                   @id @default(autoincrement())
  name                String
  UserExamPreferences UserExamPreferences[]
  Exam                Exam[]
}

model UserExamPreferences {
  id         Int       @id @default(autoincrement())
  examId     Int
  exam       Exam      @relation(fields: [examId], references: [id])
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  examNoteId Int?
  examNote   ExamNote? @relation(fields: [examNoteId], references: [id])
  stateId    Int       @default(0)
  State      State     @relation(fields: [stateId], references: [id])
}
